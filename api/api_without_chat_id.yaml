openapi: "3.0.2"
info:
  title: Chat Dancer
  version: "1.0"
servers:
  - url: 'https://dancier.net'
  - url: 'http://localhost:8080'
paths:
  /user/{user_id}/chats:
    get:
      parameters:
        - $ref: '#/components/parameters/user_id'
      summary: returns a list of all chats of a user
      responses:
        '200':
          description: "list of chats for a user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_list_response'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user/{user_id}/chats/{partner_id}/messages:
    get:
      summary: returns a list of all messages of a chat between users
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/partner_id'
      responses:
        '200':
          description: "messages from a chat between users"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_response'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: Creates a new message. If the chat does not exist yet (first message), a chat between both participants will be created
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/partner_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/base_message'
      responses:
        '201':
          description: "message created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_response'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user/{user_id}/new-messages-long-polling:
    get:
      summary: |
        Returns a list of new messages. New messages are messages created
        after the last check for new messages. This endpoint is used for long polling.
        It either returns a list of new messages or an empty body after a predefined time.
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: list of new messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new_messages_list_response'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user/{user_id}/new-messages-polling:
    get:
      summary: |
        Returns a list of new messages. New messages are messages created
        after the last check for new messages. This endpoint is used for polling.
        It either returns a list of new messages or an empty body after a predefined time.
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: list of new messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new_messages_list_response'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  parameters:
    user_id:
      name: user_id
      in: path
      description: User ID
      required: true
      schema:
        type: string
    partner_id:
      name: partner_id
      in: path
      description: ID of the chat partner
      required: true
      schema:
        type: string
  schemas:
    base_chat:
      properties:
        user_id:
          type: string
          description: Id of the user who requests chat data
          example: 123
        partner_id:
          type: string
          description: Id of the chat partner
          example: 321
        last_activity:
          type: string
          format: date-time
          description: Datetime of the last activity from this chat
    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    base_message:
      type: object
      properties:
        text:
          type: string
          description: The content of the message
          example: Lorem ipsum
        author:
          type: string
          description: The id of the author of the message
          example: 123
        recipient:
          type: string
          description: The id of the recipient of the message
          example: 321
    chat_list_response:
      type: object
      properties:
        chats:
          type: array
          items:
            $ref: '#/components/schemas/chat'
    chat:
      allOf:
        - $ref: '#/components/schemas/base_chat'
        - type: object
          properties:
            last_message:
              $ref: '#/components/schemas/message'
    chat_response:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/message'
    new_messages_list_response:
      type: object
      properties:
        new_messages:
          type: array
          items:
            $ref: '#/components/schemas/message'
    message:
      allOf:
        - $ref: '#/components/schemas/base_message'
        - type: object
          properties:
            is_read:
              type: boolean
              example: true
              description: |
                Defines if the recipient has already read the message
            is_new:
              type: boolean
              example: false
              description: |
                defines if this message was already loaded to the chat of the recipient. This happens either via long polling for new messages, by fetching all chats for the recipient or by fetching all messages for the specific chat between recipient and author.
            notification_timestamp:
              type: string
              format: date-time
              description: |
                If set the recipient was notified by email that this messgae was written for him.
